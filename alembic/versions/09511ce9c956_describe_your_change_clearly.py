"""describe your change clearly

Revision ID: 09511ce9c956
Revises: ce480483f3de
Create Date: 2025-10-09 11:39:19.480280

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '09511ce9c956'
down_revision = 'ce480483f3de'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_user_security_id'), table_name='user_security')
    op.drop_table('user_security')
    op.drop_index(op.f('ix_login_activity_id'), table_name='login_activity')
    op.drop_table('login_activity')
    op.drop_index(op.f('ix_customer_notification_preferences_id'), table_name='customer_notification_preferences')
    op.drop_table('customer_notification_preferences')
    op.drop_index(op.f('ix_seller_payment_methods_id'), table_name='seller_payment_methods')
    op.drop_table('seller_payment_methods')
    op.drop_index(op.f('ix_payment_methods_id'), table_name='payment_methods')
    op.drop_table('payment_methods')
    op.alter_column('order_items', 'status',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.Enum('pending', 'processing', 'paid', 'shipped', 'delivered', 'cancelled', name='order_item_status'),
               existing_nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('payments', 'seller_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.add_column('profiles', sa.Column('phone', sa.String(length=50), nullable=True))

    # --- 2. Convert order_items.status from VARCHAR to ENUM safely ---
    order_item_status = sa.Enum(
        'pending', 'processing', 'paid', 'shipped', 'delivered', 'cancelled',
        name='order_item_status'
    )

    # Create ENUM type in Postgres if it doesn't exist
    bind = op.get_bind()
    order_item_status.create(bind, checkfirst=True)

    # Explicitly cast VARCHAR â†’ ENUM using PostgreSQL syntax
    op.execute("""
        ALTER TABLE order_items
        ALTER COLUMN status TYPE order_item_status
        USING status::order_item_status;
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('profiles', 'phone')
    op.alter_column('payments', 'seller_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('order_items', 'status',
               existing_type=sa.Enum('pending', 'processing', 'paid', 'shipped', 'delivered', 'cancelled', name='order_item_status'),
               type_=sa.VARCHAR(length=20),
               existing_nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.create_table('payment_methods',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('method_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('card_last_four', sa.VARCHAR(length=4), autoincrement=False, nullable=True),
    sa.Column('card_brand', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('card_expiry_month', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('card_expiry_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bank_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('account_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('account_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('payment_methods_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('payment_methods_pkey'))
    )
    op.create_index(op.f('ix_payment_methods_id'), 'payment_methods', ['id'], unique=False)
    op.create_table('seller_payment_methods',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('seller_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('bank_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('account_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('account_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('bank_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('routing_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('method_type', postgresql.ENUM('bank_account', 'mobile_money', 'crypto', name='payment_method_types'), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_default', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('verification_status', postgresql.ENUM('pending', 'verified', 'failed', name='verification_status'), autoincrement=False, nullable=True),
    sa.Column('country_code', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['seller_id'], ['seller_profiles.id'], name=op.f('seller_payment_methods_seller_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('seller_payment_methods_pkey'))
    )
    op.create_index(op.f('ix_seller_payment_methods_id'), 'seller_payment_methods', ['id'], unique=False)
    op.create_table('customer_notification_preferences',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('email_order_confirmations', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_order_updates', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_delivery_notifications', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_wishlist_updates', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_price_drops', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_back_in_stock', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_promotional_offers', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_newsletters', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_product_recommendations', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_account_updates', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email_security_alerts', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('push_order_updates', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('push_delivery_notifications', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('push_promotional_offers', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sms_order_confirmations', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sms_delivery_notifications', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sms_security_alerts', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['customer_id'], ['profiles.id'], name=op.f('customer_notification_preferences_customer_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('customer_notification_preferences_pkey'))
    )
    op.create_index(op.f('ix_customer_notification_preferences_id'), 'customer_notification_preferences', ['id'], unique=False)
    op.create_table('login_activity',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('device_type', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('browser', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('os', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('login_successful', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('failure_reason', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('login_time', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('logout_time', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('login_activity_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('login_activity_pkey'))
    )
    op.create_index(op.f('ix_login_activity_id'), 'login_activity', ['id'], unique=False)
    op.create_table('user_security',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('two_factor_enabled', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('two_factor_secret', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('backup_codes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email_notifications', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('sms_notifications', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('security_alerts', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('recovery_questions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('recovery_answers', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('user_security_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('user_security_pkey')),
    sa.UniqueConstraint('user_id', name=op.f('user_security_user_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_user_security_id'), 'user_security', ['id'], unique=False)

    # --- Reverse ENUM conversion ---
    op.execute("""
        ALTER TABLE order_items
        ALTER COLUMN status TYPE VARCHAR(20)
        USING status::text;
    """)

    # Drop ENUM type (only if safe)
    op.execute("DROP TYPE IF EXISTS order_item_status;")

    # --- Remove phone field ---
    op.drop_column('profiles', 'phone')
    # ### end Alembic commands ###
